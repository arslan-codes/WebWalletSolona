{"ast":null,"code":"/*! micro-ed25519-hdkey - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport * as ed25519 from '@noble/ed25519';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, createView, hexToBytes, utf8ToBytes, bytesToHex } from '@noble/hashes/utils';\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\n// Enable sync API in noble-ed25519\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\nexport const MASTER_SECRET = utf8ToBytes('ed25519 seed');\nexport const HARDENED_OFFSET = 0x80000000;\nconst ZERO = new Uint8Array([0]);\nfunction ensureBytes(b, ...lengths) {\n  if (typeof b === 'string') b = hexToBytes(b);\n  assertBytes(b, ...lengths);\n  return b;\n}\nconst hash160 = data => ripemd160(sha256(data));\nconst fromU32 = data => createView(data).getUint32(0, false);\nconst toU32 = n => {\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n  }\n  const buf = new Uint8Array(4);\n  createView(buf).setUint32(0, n, false);\n  return buf;\n};\nexport class HDKey {\n  constructor(opt) {\n    this.depth = 0;\n    this.index = 0;\n    this.parentFingerprint = 0;\n    if (!opt || typeof opt !== 'object') throw new Error('HDKey.constructor must not be called directly');\n    assertBytes(opt.privateKey, 32);\n    assertBytes(opt.chainCode, 32);\n    this.depth = opt.depth || 0;\n    this.index = opt.index || 0;\n    this.parentFingerprint = opt.parentFingerprint || 0;\n    if (!this.depth) {\n      if (this.parentFingerprint || this.index) throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n    }\n    this.chainCode = opt.chainCode;\n    this.privateKey = opt.privateKey;\n  }\n  get publicKeyRaw() {\n    return ed25519.sync.getPublicKey(this.privateKey);\n  }\n  get publicKey() {\n    return concatBytes(ZERO, this.publicKeyRaw);\n  }\n  get pubHash() {\n    return hash160(this.publicKey);\n  }\n  get fingerprint() {\n    return fromU32(this.pubHash);\n  }\n  get fingerprintHex() {\n    return bytesToHex(toU32(this.fingerprint));\n  }\n  get parentFingerprintHex() {\n    return bytesToHex(toU32(this.parentFingerprint));\n  }\n  static fromMasterSeed(seed) {\n    seed = ensureBytes(seed);\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\n      throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n    }\n    const I = hmac(sha512, MASTER_SECRET, seed);\n    return new HDKey({\n      privateKey: I.slice(0, 32),\n      chainCode: I.slice(32)\n    });\n  }\n  derive(path, forceHardened = false) {\n    if (!/^[mM]'?/.test(path)) throw new Error('Path must start with \"m\" or \"M\"');\n    if (/^[mM]'?$/.test(path)) return this;\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\n    // tslint:disable-next-line\n    let child = this;\n    for (const c of parts) {\n      const m = /^(\\d+)('?)$/.exec(c);\n      if (!m || m.length !== 3) throw new Error(`Invalid child index: ${c}`);\n      let idx = +m[1];\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) throw new Error('Invalid index');\n      // hardened key\n      if (forceHardened || m[2] === \"'\") idx += HARDENED_OFFSET;\n      child = child.deriveChild(idx);\n    }\n    return child;\n  }\n  deriveChild(index) {\n    if (index < HARDENED_OFFSET) throw new Error(`Non-hardened child derivation not possible for Ed25519 (index=${index})`);\n    // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n    const data = concatBytes(ZERO, this.privateKey, toU32(index));\n    const I = hmac(sha512, this.chainCode, data);\n    return new HDKey({\n      chainCode: I.slice(32),\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n      index,\n      privateKey: I.slice(0, 32)\n    });\n  }\n  sign(message) {\n    message = ensureBytes(message, 32);\n    return ed25519.sync.sign(message, this.privateKey);\n  }\n  verify(message, signature) {\n    message = ensureBytes(message, 32);\n    signature = ensureBytes(signature, 64);\n    return ed25519.sync.verify(signature, message, this.publicKeyRaw);\n  }\n}","map":{"version":3,"names":["ed25519","hmac","ripemd160","sha256","sha512","concatBytes","createView","hexToBytes","utf8ToBytes","bytesToHex","bytes","assertBytes","utils","sha512Sync","m","MASTER_SECRET","HARDENED_OFFSET","ZERO","Uint8Array","ensureBytes","b","lengths","hash160","data","fromU32","getUint32","toU32","n","Number","isSafeInteger","Error","buf","setUint32","HDKey","constructor","opt","depth","index","parentFingerprint","privateKey","chainCode","publicKeyRaw","sync","getPublicKey","publicKey","pubHash","fingerprint","fingerprintHex","parentFingerprintHex","fromMasterSeed","seed","length","I","slice","derive","path","forceHardened","test","parts","replace","split","child","c","exec","idx","deriveChild","sign","message","verify","signature"],"sources":["D:/Cohort3/WEB3/solana-web-wallet/node_modules/micro-ed25519-hdkey/esm/index.js"],"sourcesContent":["/*! micro-ed25519-hdkey - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport * as ed25519 from '@noble/ed25519';\nimport { hmac } from '@noble/hashes/hmac';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { concatBytes, createView, hexToBytes, utf8ToBytes, bytesToHex } from '@noble/hashes/utils';\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\n// Enable sync API in noble-ed25519\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\nexport const MASTER_SECRET = utf8ToBytes('ed25519 seed');\nexport const HARDENED_OFFSET = 0x80000000;\nconst ZERO = new Uint8Array([0]);\nfunction ensureBytes(b, ...lengths) {\n    if (typeof b === 'string')\n        b = hexToBytes(b);\n    assertBytes(b, ...lengths);\n    return b;\n}\nconst hash160 = (data) => ripemd160(sha256(data));\nconst fromU32 = (data) => createView(data).getUint32(0, false);\nconst toU32 = (n) => {\n    if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\n        throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\n    }\n    const buf = new Uint8Array(4);\n    createView(buf).setUint32(0, n, false);\n    return buf;\n};\nexport class HDKey {\n    constructor(opt) {\n        this.depth = 0;\n        this.index = 0;\n        this.parentFingerprint = 0;\n        if (!opt || typeof opt !== 'object')\n            throw new Error('HDKey.constructor must not be called directly');\n        assertBytes(opt.privateKey, 32);\n        assertBytes(opt.chainCode, 32);\n        this.depth = opt.depth || 0;\n        this.index = opt.index || 0;\n        this.parentFingerprint = opt.parentFingerprint || 0;\n        if (!this.depth) {\n            if (this.parentFingerprint || this.index)\n                throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\n        }\n        this.chainCode = opt.chainCode;\n        this.privateKey = opt.privateKey;\n    }\n    get publicKeyRaw() {\n        return ed25519.sync.getPublicKey(this.privateKey);\n    }\n    get publicKey() {\n        return concatBytes(ZERO, this.publicKeyRaw);\n    }\n    get pubHash() {\n        return hash160(this.publicKey);\n    }\n    get fingerprint() {\n        return fromU32(this.pubHash);\n    }\n    get fingerprintHex() {\n        return bytesToHex(toU32(this.fingerprint));\n    }\n    get parentFingerprintHex() {\n        return bytesToHex(toU32(this.parentFingerprint));\n    }\n    static fromMasterSeed(seed) {\n        seed = ensureBytes(seed);\n        if (8 * seed.length < 128 || 8 * seed.length > 512) {\n            throw new Error(`HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`);\n        }\n        const I = hmac(sha512, MASTER_SECRET, seed);\n        return new HDKey({\n            privateKey: I.slice(0, 32),\n            chainCode: I.slice(32),\n        });\n    }\n    derive(path, forceHardened = false) {\n        if (!/^[mM]'?/.test(path))\n            throw new Error('Path must start with \"m\" or \"M\"');\n        if (/^[mM]'?$/.test(path))\n            return this;\n        const parts = path.replace(/^[mM]'?\\//, '').split('/');\n        // tslint:disable-next-line\n        let child = this;\n        for (const c of parts) {\n            const m = /^(\\d+)('?)$/.exec(c);\n            if (!m || m.length !== 3)\n                throw new Error(`Invalid child index: ${c}`);\n            let idx = +m[1];\n            if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET)\n                throw new Error('Invalid index');\n            // hardened key\n            if (forceHardened || m[2] === \"'\")\n                idx += HARDENED_OFFSET;\n            child = child.deriveChild(idx);\n        }\n        return child;\n    }\n    deriveChild(index) {\n        if (index < HARDENED_OFFSET)\n            throw new Error(`Non-hardened child derivation not possible for Ed25519 (index=${index})`);\n        // Hardened child: 0x00 || ser256(kpar) || ser32(index)\n        const data = concatBytes(ZERO, this.privateKey, toU32(index));\n        const I = hmac(sha512, this.chainCode, data);\n        return new HDKey({\n            chainCode: I.slice(32),\n            depth: this.depth + 1,\n            parentFingerprint: this.fingerprint,\n            index,\n            privateKey: I.slice(0, 32),\n        });\n    }\n    sign(message) {\n        message = ensureBytes(message, 32);\n        return ed25519.sync.sign(message, this.privateKey);\n    }\n    verify(message, signature) {\n        message = ensureBytes(message, 32);\n        signature = ensureBytes(signature, 64);\n        return ed25519.sync.verify(signature, message, this.publicKeyRaw);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}